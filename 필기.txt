# Django 특강 with 덕배 2024-11-14

## pre-commit
- 매 번 커밋하기 전에 black, isort, mypy, 단위테스트 등등등을 수행하도록 할 수 있다.
- https://pre-commit.com/
- 덕배가 잘 안쓰는 이유 -> 매 번 커밋할때마다 꼭 수행할 필요가 없는 경우도 있음
    - rebase 할 때마다 매 번 pre-commit 이 수행되는 문제도 있음 (불필요하고 시간도 오래걸립니다.)
- 덕배의 생각: PR 올리고 나서만 CI 가 성공하면 된다는 생각.


## bulk create
- 2 개 이상의 model 을 한번에 insert 하고 싶다면 `bulk_create()` 를 사용합니다.
    `User.objects.bulk_create([User(name="a"), User(name="b")])`
    - bulk_create 할떄 auto_now 동작하는지 가물가물...? 확인 필요

## 디버깅
- 오늘 수업에서 단 한 가지만 기억할 수 있다면 "디버깅" 을 기억하십시오!
- 김 포프: 나는 디버깅을 못하는 사람 중에서 개발을 잘하는 사람을 거의 본적이 없고,
    개발을 잘하는 사람 중에서 디버깅을 못하는 사람은 (아예) 본적이 없다.
- 중단점(break point): 프로그램을 멈출건데, 이 라인을 실행하기 직전에 멈출것이다.
- 디버그 패널에서 변수 내부를 볼 수 있습니다. 디버그 패널 오른쪽에 watch 가 있습니다. (지역변수 목록을 보여줍니다.)
- (프로그램을 멈춘 상태로) 뭐든지 뭔가를 실행해보고 싶다면? (expression)
- watch 화면에서 검색도 할 수 있습니다. 그냥 검색어를 타이핑 하면 됩니다.

### Evaluate Expression (표현식 평가)
- 중단점에 의해서 시간이 정지된 상태로, 무엇이든지 실행해 볼 수 있습니다.
- watch 패널에서 실행할 수도 있고, 디버그 패널에서 More 메뉴로 들어간 다음에 Evaluate Expression 을 선택할 수도 있습니다.


## 디버깅 중 실행흐름의 컨트롤
- Step over -> 한 줄 밑으로 실행합니다.
- Step Into -> 함수 내부로 들어갑니다.
- Resume (구버전에서는 Run to Cursor) -> 다음 중단점 까지 실행합니다.


## 디버깅이 중요한 이유
- 제 강의의 목적은 제가 없어도 여러분이 스스로 문제를 해결할 수 있도록 하는 것.
- 디버깅을 못하면, 원인을 못찾습니다. 반대로 디버깅을 할 수 있다면 문제의 원인을 찾을 수 있게 됩니다.
- 어느 지점부터 여러분의 예상과는 다르게 동작을 했는지, 디버깅을 사용하면 쉽게 알 수 있습니다. (중단점 찍고, 변수 내부 보고, 실행 흐름을 보면 됩니다.)


## Django Isolation (격리, 헬스에서는 고립)
- 쟝고는 테스트용 데이터베이스를 따로 만듭니다. (이 데이터베이스는 처음에 비어있습니다.)
- (트랜젝션을 안 배운 상태긴 하지만) 쟝고는 모든 테스트를 트랜젝션 안에서 수행합니다.
    - BEGIN 으로 시작
    - 끝낼때는 COMMIT(트랜젝션 내의 모든 변경을 영속화합니다.), ROLLBACK(트랜젝션 전체를 없던 것 처럼 만듭니다.) 둘 중 하나를 할 수 있습니다.
- 위 두가지에 의해서 테스트들이 "격리"된 상태에서 수행되게 됩니다.
- 테스트가 외부 데이터에 흔들리지(영향을 받지) 않게 됩니다.
- 디버깅을 비정상종료 할 경우 쟝고가 테스트 데이터베이스를 삭제하지 못합니다. 그 다음번에 테스트를 실행하면 "데이터베이스를 삭제하고 새로 만들어도 되나요?" 라고
    django 가 물어보는데, 이 때는 yes 하면 됩니다.


## 테스트 함수가 실패와 성공을 판가름 하는 방법
- 테스트 함수는 아무런 exception 이 발생하지 않고 종료되었을때 성공합니다.
- 반대로, 어떤 Exception 이든 exception 이 발생했다면 실패입니다.
- 검증을 하되, 검증 실패시 에러가 일어나도록 하고 싶다면 `assert` 를 사용합니다.
    e.g.) `assert 1 + 1 == 2`


## Working Directory (작업 폴더)
- 작업 폴더가 깨끗하다 -> 커밋할게 없다.
- 중요한 습관: 항상 개발을 시작할 때에는 작업 폴더를 깨끗하게 만든 후에, 전체 테스트가 전부 통과하는지 확인하고 -> 개발 시작합니다.


## 제품 코드, TDD
- 프로젝트 내의 코드를 제품 코드와, 테스트 코드로 나눕니다. 제품 코드 <--> 테스트 코드
- 교재의 do_like() 가 제품 코드입니다.
- Test Driven Development : 테스트 코드를 먼저 작성하고, 테스트가 실패하는 것을 확인하고, 그 다음에 제품 코드를 작성하고 테스트가 통과하는지 확인하는 개발 방식
    - 장점: 제품 코드를 먼저 작성하고 그 후에 테스트를 쓰면, 무의식적으로 "성공하는 테스트"만 짜게 됩니다.
    - 테스트 코드를 먼저 작성하면 위와 같은 방어기제가 동작하지 않기 때문에 더 견고하게 테스트 & 제품 코드를 짤 수 있다.
    - agile practice 중에 하나입니다. (애자일 실천방법)


11/15
## 디버그 복습
- 디버깅 단축키: 컨트롤 + 쉬프트 + D
- 디버그 시작하기 전에 중단점을 찍고 디버그를 시작해야 합니다.
(중단점이 하나도 없다면, 그냥 실행하는 것과 다름이 없습니다.)
(주의할 점: 디버그모드로 실행하면 프로그램은 더 느려집니다.)

실행 흐름의 컨트롤
- 한 줄 밑으로 실행: step over
- 함수 안으로 들어가려면: step into
- step into 에는 2가지가 있습니다.
- step into my code (라이브러리안으로 들어가지 않습니다.)
- step into 그냥 안으로 들어갑니다.
- 다음 중단점을 만날때까지 실행: resume program
(옛날 파이참: run to cursor)